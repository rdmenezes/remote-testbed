RFC101: Udev device management
==============================
:Number:	101
:Version:	1
:Status:	Developing

This enhancement proposal should be seen as a natural upgrade to the
more modern and powerful Linux device management system called udev. In
exchange of obsoleting usage of the hotplug system, the end result
should be a simpler and more portable (note: still Linux-specific)
method of handling motes being added and removed by the mote control
hosts.


Background
----------

Re-Mote mote control hosts (MCH) have "historically" used hotplug to get
notifications of new motes being added and moted being removed. By
configuring the hotplug system to run a program called plugpiper, the
MCH have been signaled via a pipe (`/var/run/motehost.events`) that it
should update its list of motes. This has been done by parsing the USB
device information provided by the kernel (in `/proc/bus/usb/devices`).
By rebuilding an internal device table, missing and new devices have
been found.

Udev is the newest attempt at Linux device management, which has moved
managing of the device filesystem (`/dev`) into userspace. Over time, it
has also ended up providing user space the ability to register scripts
or programs to be run when certain devices are added or removed, which
to some extent has made hotplug obsolete (although hotplug is still
being maintained).

.From udev(7):
________________________________________________________________________
udev provides a dynamic device directory containing only the files for
actually present devices. It creates or removes device node files in the
`/dev` directory, or it renames network interfaces.

If udev receives a device event, it matches its configured rules against
the available device attributes provided in sysfs to identify the
device. Rules that match may provide additional device information or
specify a device node name and multiple symlink names and instruct udev
to run additional programs as part of the device event handling.
________________________________________________________________________

To summarize, udev can be seen as a replacement of both hotplug
notifications and device information retrieval. Although the primary
reason for upgrading to udev is to simplify handling of device
notifications, considering the use of udev for all tasks concerning
device discovery adds the benefit of only relying on one source for this
information in addition to allowing certain simplifications.


Details and considerations
--------------------------

The Re-Mote mote control infrastructure (MCI) has been designed to allow
motes to automatically be located via their MAC addresses and a
deployment positions. The latter is derived via their connection path
(host network address and mote bus location), which can then be matched
with information in a database by the mote control server (MCS). The
replacement needs to take this into consideration in its design, most
importantly regarding the correct identification of the mote bus to
which a mote is attached.

If portability beyond Linux will be needed at some point, the change to
use udev will make the impact of needed changes less noticable in the
MCH core code. Most changes can be confined to the helper scripts. As an
example, if the MCH were to be ported to a *BSD based system usbd(8), a
daemon similar to udevd(8), could take care of notifying MCH of device
attach/detach events, while a helper program using libusb, a library
allowing userspace application access to USB devices, could take care of
retrieving device information. None of these changes would require any
significant changes to the MCH daemon as long as all helper scripts and
programs use the same format for specifying event information.

To make it easier for scripts to notify the MCH daemon, notifications
could alternatively be given via signals instead of via writing to the
`/var/run/motehost.events` pipe. This would still require that the mote
host uses a file under `/var/run` to store its PID. Scripts could then
use:

	kill -USR1 $(cat /var/run/motehost.pid)

to tell the daemon to update its device list. The main reason for
mentioning it is that the udev manpages state that the program that are
configured to run on events should be short-lived as the udev daemon
will wait for it to terminate before continuing. In that respect,
delivering a signal might be faster and non-blocking than writing to a
pipe. However, this might not be an issue at all. 

Since the mote host will depend on an external script or program to
provide it with device information, an format or interface for this
needs to be designed. A simple solution would be reuse the current
configuration file syntax as well as the boost::program_options library
for storing and parsing this information. The helper script or programs
can then create a file under `/var/spool/motehost/`, detailing the
device event, and ask the mote host to process spooled files when done.

The above consideration points out that there needs to be a well-defined
interface between the two (now separate) parts of the MCH system. As a
start it might be OK to hardcode some of the configuration information,
such as path to the spool directory and other shared files. However,

Udev supports creation of device symlinks. This will make it possible to
use udev rules to maintain a Re-Mote specific device hierarchy under
/dev. This would allow motes to be ordered by platform, bus, and/or some
other metric, e.g. `/dev/remote/dig528-2/bus1/mote2`. Encoding device
information in the device name might facilitate a future where MCH is a
common daemon, which, based on nodes in the device hierarchy, applies
different "mote drivers" or backends for the lowlevel control. Using
device hierarcies, however, might not be portable and needs more
consideration.

The clear separation of device notifications and information retrieval
from the MCH core code will help to ease testing. First, it will allow
each component (event script/programs and mote host) to be tested
separately. This can be useful when porting to a new platform. Second,
since the MCH core code will be more platform independant and high
level, it will be trivial to simulate device events. The end result will
be that a future test suite for the MCH core code will not require user
interaction and consequently will help to find regressions faster. For
the low-level device event handling, a test script or utility requiring
user interaction for testing the basic functionality can be created if
needed.


Proposed changes and roadmap
----------------------------

 . The MCH "package" should provide udev related example files in the
   contrib area.

   - Add a simple udev rules file for the dig528-2 motes. (done)

   - Add example script or program for retrieving device information and
     formatting it as required by the mote host as well as notifying the
     mote host.

 . The device management in the MCH core code should be moved to the new
   interface. This mainly requires changes to the `DeviceManager` class,
   but may also involve the addition of new configuration variables.

   - Add support for reading/parsing configuration files with
     information about device events.

   - Change the device manager's refresh-hook to get its information
     from the event spool instead of reading files under `/proc`. 

   - Only update devices that has changed. Currently, all mote devices
     are invalidated each time a hotplug event is received and made
     valid after reparsing the various device files under `/proc`.

 . Various additional cleanups.

   - Remove the plugpiper program located under diku_mch/plugpiper/ or
     move it to the contrib area.

   - Remove the hotplug related example files from the contrib area.

   - Remove dependency check on boost::regex from `configure.in` and
     `config/acinclude.m4`.


Other implications
------------------

 - Allows the following options to be removed as they are only relevant
   to the device helper scripts and programs:

   usbserialPath;; Path to the usbserial device file.
		Default: `/proc/tty/driver/usbserial`

   usbdevicePath;; Path to the usb system device file.
		Default: `/proc/bus/usb/devices`

   macPrefix;;	The initial part of MAC adresses for DIG528-2 boards.
		Default: `0x0050C237`

   vendorId;;	USB Vendor ID for the DIG528-2 boards.
		Default: `0050`

   productId;;	USB Product ID for the DIG528-2 boards.
		Default: `c237`

 - Depending on the choice of how events are signaled to the MCH daemon,
   the following option can also be removed:

   usbPlugEventPipe;; Path to the fifo notifying the motehost of mote
		hotplug events.
		Default: `/var/run/motehost.events`

 - In the future, the configure script should maybe check for udev tools
   if files in the contrib area should be autogenerated.

// vim:tw=72
