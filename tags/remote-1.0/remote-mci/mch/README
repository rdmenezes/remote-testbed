1) class MoteHost

The class containing main function. It tries to connect to Re-Mote server and 
then begins with serviceLoop(). It creates pipe(/var/run/motehost.events) for
signaling the events (PLUG & UNPLUG) of each mote. The events are handled by
UDEV system allowing to register programs which then run when certain event 
occurs.

For TMote:
BUS={usb}, SYSFS{idVendor}=="0403", SYSFS{idProduct}=="6001" RUN+="plugpiper motehost.events"

For Micaz:
BUS={usb}, SYSFS{idVendor}=="0403", SYSFS{idProduct}=="6010" RUN+="plugpiper motehost.events"

The program plugpiper writes single char into the pipe as a notification for
the service loop. In more details, the funtion select() monitors all registered 
file descriptors until any of them becomes ready (write, read operation on
the destriptor) and then accomplishes the particular service.

The second step is to create list of the motes currently available in Re-Mote. 
It's handled by the funtion DeviceManager::refresh(). I'll discuss that in the 
particular class.

The third step is to build set of descriptors which will be monitoring by
select() function within the service loop.

The service loop is based on the function select() as I mentioned earlier.
The specific function(handleMessage(), handlePlugEvent(), handleMote()) 
is invoked according to the activity on the certain descriptor.

-handleMessage()
It indicates that the message from Re-Mote server was received and tries to
find out the type of the message. There are two types possible (reguest
& data). If it's request then the function handleRequest() will be called. 
The data are handled by mote->writeBuf().

--handleRequest()
The commands from Re-Mote server: program, cancelProgramming, status, reset, 
start & stop

I won't disscus the commands here since they relate to Mote class.

-handlePlugEvent()
It indicates that the change happened on the descriptor relating to the file
motehost.events. The function has to recreate(DeviceManager::refresh()) 
list of the motes and notify the Re-Mote server about the availability of the 
motes (PLUG_MOTES & UNPLUG_MOTES).

-handleMoteData()
It checks data coming from the mote and if so, the function sends them 
directly to the Re-Mote server. If there are no data from the mote
(the function p_mote->readBuf() is called once) then it checks if the 
mote programming happens and reports it back to the Re-Mote server in 
case of that the programming status was successful (done).

Question: synchronization between readBuf() & getProgrammingResult within
	  the context of handleMoteData(). When does it reports that the 
	  programming is done? 

---------------------------------------

I would say that there is no need to change this class regarding support
for TMote & MicaZ. Perhaps, just small change(rename the file) within the 
function program().

2) class DeviceManager

The class managing the motes. It keeps the track of the motes which are
currently available for the Re-Mote server. It also maintains the motes
recently being added or removed.

-refresh()
The function is public and serve as an interface for updating the list of
the motes currently in the system.

-readUsbDevices()
The function reads and parses the data from the system file specified by
usbdevicePath (/proc/bus/usb/devices). The data are stored using the 
usbdevice_t structure (devNo, bus, parent, port, serial). The two devices 
arrays are maintained by the function. The first one is devicesById and
saves the devices ordered by SerialNumber (serial inside of usbdevice_t).
The second one is devicesByConnection and saves the same set of devices,
but ordered by the key (calculated by the function get_device_key()).

--get_device_key()
The key is created based on the values inside of usbdevice_t (bus, parent,
port).
 
-readMoteDevices()
The function takes care of the three motes arrays (motes, motesNew, motesLost).
The information is taken from the system file specified by usbserialPath 
(/proc/tty/driver/usbserial, root is allowed to read the file). The function 
tries to match the information (tty, hcid, ports, path) with the data stored 
in the usbdevice_t structure in order to calculate MAC address for the motes 
(based on SerialNumber). The mote objects are then created by new Mote(mac, 
path, tty) and the motes, motesNew, motesLost objects are updated accordingly.

Needs to be clarified:
-devicesById.find(hcid); //suppose hcid=6001 resp. 6010 (have to run it separately)
-findUsbDevice();
 
---------------------------------------

Generally speaking, the system should be able to recognize different types of
motes (DIG528-2, TMote, MicaZ, ...) and then handle communication with the 
motes according that. As a example, the MIB520 board has two serial ports, 
one of them for the programming and the second one for the communication 
with MicaZ.  

3) class Configuration
The class parses the configuration file remote-mch.cfg and stores the values
into the buffer. The configuration file should reflect multi-platforms system.
(DIG528-2, TMote, MicaZ, ...).

4) class Mote
The class defines the mote object and inherits the class SerialControl. It's
quite straightforward and uses parameters mac, path, ttyNum for creating the 
mote object.

I think we could consider extending the object constructor to:
Mote::Mote(type, mac, path, tty). Where the parameter type would be the type 
of mote (DIG528-2, TMote, MicaZ, ...). Opened to discussion.

QUESTION: Why do you make testmote in the function validate()?

5) class SerialControl
The class supporting communication (commands, data) with the motes. The object
is created during creation of the mote object and parameter portnumber is passed 
to the constructor.

-openTty()
It handles opening and setting the serial port (ttyUSB+portnumber). The state
of the serial port is indicated by variable isOpen. The mote itself is put in 
to stop mode (keep reseting).

-closeTty()
It closes the serial port and restore old setting.

-program()
The function handles flash programming of the mote. The MAC address is used 
for programming. The bash command for flash programming (msp430-bsl, uisp)  
is put together to be able run as a separate process (child) connected with
parent process by a pipe. Once the programming is finished, the child process
writes the programming status into the pipe. The function rebuildFdSet() is
called every time when the function select() is activated and it allows to
get the notification even on the pipe descriptor. The data is read from the 
pipe by the function readBuf(). The child process then closes pipe's descriptors 
and on this event the function readBuf() gets readlen <= 0 and reports the 
status of the mote programming.

QUESTION:
Not sure about the story above. When does it rebuildFdSet() for pipe 
descriptor? The port is closed by _close() so the descriptor is no longer
valid.

-readBuf()
The function reads data from either serial port or the pipe. It also checks 
if the programming is in progress and if so, it waits until the child process
is finished and reports the status.

-cleanUpProgram()
It closes the pipe descriptor and opens new connection to the mote. The 
variables isProgramming and wasProgramming are set to false and true. The
buffer containing the image is delated.

-getProgrammingStatus()
It returns the value of the variable wasProgramming and after that it sets
the variable to false.

-cancelProgramming()
It checks if the programming is active and if so, it kills the child process
and reopen tha connection to the mote.

-getFd()
It returns the port for the function rebuildFdSet().

-getStatus()
It reports back the mote status (PROGRAMMING, UNAVAILABLE, RUNNING, STOPPED).

-start(), stop()
These functions are platform dependent and needs to be changed for particular
platform (DIG528-2, TMote, MicaZ, ...).

-reset()
It uses the functions stop() & start().

---------------------------------------

The functions which needs to be changed:
_open() ... rate B38400
program() ... bash command
stop()
start()
