#summary How to install and maintain a testbeds with Re-Mote
#labels Type-Manual,Featured

This manual for testbed administrators has instructions on how to install and configure a testbed as well as information about maintaining a running testbed.

Table of contents:

 * [#An_Overview_of_the_Testbed_Framework An Overview of the Testbed Framework]
 * [#Before_Deploying_the_Testbed Before Deploying the Testbed]
 * [#Installing_the_Testbed Installing the Testbed]
   * [#Setting_up_the_Database Setting up the Database]
   * [#Building_and_Deploying_the_Web_Services Building and Deploying the Web Services]
   * [#Installing_the_Mote_Control_Host_and_Mote_Control_Server Installing the Mote Control Host and Mote Control Server]
 * [#Managing_Users_and_Projects Managing Users and Projects]

= An Overview of the Testbed Framework =

The Re-Mote Testbed Framework consists of 4 basic components:

_Database Scripts_ (`remote-db`)

   Contains SQL scripts for creating and maintaining the MySQL database. It is used by the web service and mote control component for tracking the state--static as well as dynamic--of the testbed. The underlying data model is based on the three fundamental entities: motes, mote host sites, and user sessions.

_Web Services_ (`remote-ws`)

   Defines Java-classes that provide web services which allow clients to interact with the testbed. The web services are responsible for authenticating users, granting access to motes, and getting mote specific information, such as availability and MAC address.

_Mote Control Infrastructure_ (`remote-mci`)

   Provides the infrastructure that keeps track of which motes have been deployed and where. It is divided into two parts: the mote control host (MCH), which is responsible for the low-level interaction with the motes in the testbed, and the mote control server (MCS), which serves mainly as message forwarder between mote hosts and connected clients. Written in C++ for performance.

_GUI Client_ (`remote-gui`)

   Implements client Java-libraries for interacting both with the web services and the mote control server and a GUI client allowing users to connect to a testbed, program motes, and monitor console output from motes. The client has been written to work with different testbeds and should not require any changes regardless of for example different user credential requirements.

= Before Deploying the Testbed =

Before deploying, you are advised to first read the SecurityConsiderations. It lists information about potential security threads, including what ports needs to be open on the server.

== Library and Program Dependencies ==

In the tables below, build and runtime dependencies for each component are listed along with tested and _known-good_ versions. Other versions may also be supported.

|| *Component*  || *Build dependency*                                  || *Version* ||
|| `remote-mci` || C compiler and C++ compiler (e.g. gcc)              || - ||
||              || MySQL C library and development files               || >= 5.0.45 ||
||              || MySQL C++ library and development files             || >= 2.0.7 ||
||              || Boost program options library and development files || >= 1.34.1 ||
||              || Autoconf (_only if building from SVN/git checkout_) || >= 2.59 ||
||              || Autoconf (_only if building from SVN/git checkout_) || >= 1.4 ||
|| `remote-ws`  || Java runtime and compiler                           || - ||

In addition, all components requires that a POSIX compliant shell (e.g. `bash`) and GNU `make` are installed on the system.

|| *Component*  || *Runtime dependency*                                || *Version* ||
|| `remote-db`  || MySQL server and client program and utilities       || - ||
|| `remote-mci` || MySQL C library                                     || >= 5.0.45 ||
||              || MySQL C++ library                                   || >= 2.0.7 ||
||              || Boost program options library                       || >= 1.34.1 ||
|| `remote-ws`  || Java runtime                                        || - ||
||              || Apache Tomcat                                       || >= 5.5 ||
||              || Axis                                                || >= 1.4 ||

== Setting up Tomcat and Axis for Re-Mote ==

 # Start out by copying the `axis/` example directory from the axis-bin-1.4 release to the $TOMCAT/webapps directory. Note, in order for tomcat to be able to remember your configuration of deployed services etc. and reload it between reboots, you need to make the `axis/WEB-INF` directory writable. Settings will be maintained in a file called `server-config.xml`.
 # Install database specific jar files i the $TOMCAT/common/lib directory:
   * mysql-connector-java-5.0.4.jar
   * naming-factory-dbcp.jar
 # Modify `$TOMCAT/conf/server.xml` to declare a resource for the database:
{{{
<Server port="8005" shutdown="SHUTDOWN">
	<!-- ... -->
	<Service name="Catalina">
		<!-- ... -->
		<Engine name="Catalina" defaultHost="localhost">
			<!-- ... -->
			<Host name="localhost" appBase="webapps"
				unpackWARs="true" autoDeploy="true"
				xmlValidation="false" xmlNamespaceAware="false">
				<!-- ... -->
				<Context path="/axis" docBase="axis"
					debug="5" reloadable="true" crossContext="true">
					<!-- ... -->
					<Resource name="jdbc/REMOTE" auth="Container" type="javax.sql.DataSource"
						maxActive="100" maxIdle="30" maxWait="10000"
						username="remote_admin" password="remote"
						driverClassName="com.mysql.jdbc.Driver"
						url="jdbc:mysql://localhost/REMOTE?autoReconnect=true"/>
				</Context>
			</Host>
		</Engine>
	</Service>
</Server>
}}}
 * Restart tomcat. Note, while changes in the axis specific configuration files will automatically be noticed by tomcat, always remember to restart tomcat after changing the `server.xml` file.
 * Check that the axis start page loads. If it does, also check that dependencies are satisfied by going to the "Validation" page.


= Installing the Testbed =

First get the SourceCode for the `remote-db`, `remote-ws`, and `remote-mci` components. You should install the components in the following order:

== Setting up the Database ==

By default the database will be named `REMOTE` with privileges granted
to the user named `remote_admin` having the password `remote`. This is
all done in `remote_core/scripts/create_remote_db.sql`, which should be
run first when creating a new database for a testbed.

*Note*, if you change the username or password, you should also
change the `user_model/scripts/credentials.sh` script to mirror
what you changed. See below for

Create the database by running the command:
{{{
$ mysql < remote_core/scripts/create_remote_db.sql
}}}
as a user, who has write privileges, e.g. root.

After creating the database, create the tables using the supplied script and specifying the username, password, and database on the command line:
{{{
$ mysql --user=remote_admin \
	--password=remote \
	REMOTE < remote_core/scripts/create_tables.sql
}}}

Then create the tables for the user mode:
{{{
$ mysql --user=remote_admin \
	--password=remote \
	REMOTE < user_model/scripts/create_tables.sql
}}}

Finally, set up the site specific tables and attribute associations. For DIKU this amounts to:
{{{
$ mysql --user=remote_admin \
	--password=remote \
	REMOTE < diku_specific_infrastructure/scripts/create_tables.sql
}}}
and:
{{{
$ mysql --user=remote_admin \
	--password=remote \
	REMOTE < diku_specific_infrastructure/scripts/insert_attribute_types.sql
}}}

== Building and Deploying the Web Services ==

The following steps are needed to install the web services:

 # First build the server jar file by running `make` in the component's top-level directory.
 # Then copy `lib/remote-ws-server.jar` to the `$TOMCAT/webapps/axis/WEB-INF/lib` directory on your server. Verify in the log file that tomcat notices the new library and reloads the context. *Note*, if you plan to do a little tweaking of the server-side code yourself, you can configure the `DEPLOYHOST` and `DEPLOYPATH` settings in the start of the `Makefile` to make the `deploy-jar` rule do this for you.
 # Request axis to deploy the the web services using the WSDD files in the `wsdd` directory. The `Makefile`'s `deploy-wsdd` rule might be of help, however, you need to change the default credentials in the top of the `Makefile`. This only needs to be done once.
 # Use a browser to view the axis start page and follow the link to the list of deployed web services to verify that the 3 new web services are advertised.

== Installing the Mote Control Host and Mote Control Server ==

   ./configure " '--without-boost-regex' 'CXXFLAGS=-I/usr/include/boost-1_33/'

= Managing Users and Projects =

The *user_model* module in the database component contains a series of scripts, which can be used for managing user and project information. Users and projects accounts are created separately and can afterward be associated by adding a user to a project allowing users to
be members of multiple different project.

Below is a small example where a user and a project is set up. It assumes that the `user_model/scripts/credentials.sh` file has been changed to automatically set database password. This can be done via something like the following:
{{{
export USER=remote_admin
export PASS=remote
export HOST=localhost
export MYSQL="mysql -u$USER -p$PASS -h$HOST"
export DBNAME=REMOTE
}}}

First, create a user:
{{{
$ ./user_model/scripts/create_user.sh
Enter login of new user:
fonseca
Enter password of new user:
secret
Enter email address of new user:
fonseca@diku.dk
Enter full name of new user:
Jonas Fonseca
insert into user(login,password,name,email) values ('fonseca',md5('secret'),'Jonas Fonseca','fonseca@diku.dk');
}}}

Next, create a project:
{{{
$ ./user_model/scripts/create_project.sh
Enter name of new project:
test
creating test;
insert into project(name) values ('test');
}}}

Finally, add the user to the project:
{{{
./user_model/scripts/add_user_project.sh
Enter login of user:
fonseca
Enter name of project:
test
insert into user_project(user_id,project_id) select (select id from user where login='fonseca'),(select id from project where name='test')
grant select,insert,delete,update on test.* to 'fonseca'@'%'
}}}

The remaining scripts can be used for changing a user password,
removing a user from a project, and deleting a user or project
account.