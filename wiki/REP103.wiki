#summary Re·Mote Testbed Framework Java Library
#labels Section-Proposal,Status-Draft

Before the introduction, provide a short abstract summarizing the motivation factors and proposed solution.

== Introduction ==

 * What is this proposal trying to solve.
 * Why are existing solutions (if any) insufficient.
 * Short summary of proposed change.

== Details ==

 * Detailed description of the proposal.
 * Dependencies on other proposals.

The library consists of a set of packages that provides APIs that can be used by clients for connecting to testbeds using the Re·Mote Testbed Framework. In the following, an overview of the various design decisions are presented.

=== Versioning ===

To support future updates to the APIs, most importantly services that involve the communication with the testbed server, the library and API is versioned in such a way that it will be easier to update a service provider to support the changes. Do

=== Library Structure ===

=== Mote Information and Control ===

The most important function of this library is the API provided for mote control. The rest is more or less just a mean to achieve this. For certain mote operations an authenticated session is required.

=== Session Management ===

All operations happens withint the context of a session. Most of this is hidden in the mote control interfaces, however, any implementation needs to keep track of this relation "behind the scene".

=== Service Management ===

One service per sub-package? - Services are modelled on the services of remote-1.x and the way in which the remote-1.x client works.
Asynchronous vs. Blocking APIs

The APIs of this library is designed to support as many different work-flows as possible. This means that both blocking and asynchronous, web-based etc. Axis supports asynchronous and AJAX web applications (GWT) are inherently asynchronous. Two concepts are used: - Listeners: One listner pr. object, one completion event/method per call. - Callbacks: One callback handler per call/method.

=== Abstraction layers and types ===

Layering means that some types will be represented at different layers from codes exchanged over the network protocols to values exposed to the high-level mote control command results.

== Considerations ==


 * How will it affect users, administrators, and developers?
 * Compatibility with existing and future releases.
 * Other implications?

== Roadmap ==

 * Plan for proposed changes.
 * Issues that need to be fixed.

== References ==

 * Related work and links to external documentation.